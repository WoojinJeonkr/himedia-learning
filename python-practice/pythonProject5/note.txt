* 예외처리(Exception)

코드의 중간에 에러가 있으면 프로그램 실행은 중단되어버림.
중단시키지 않고, 에러가 발생한 부분만 실행을 시키지 않으면서
프로그램 실행을 계속 할 수 있게 하는 것
에러나는 부분만 실행의 예외로 두고,
다른 부분의 실행은 계속 하겠다고 처리할 수 있음.

코드 >>
try: # 필수
    에러 가능성이 있는 코드 블록
except: # 필수
    에러가 났을 경우 어떻게 처리할지 내용을 코드함.
finally: # 옵션
    에러가 나는지 여부와 상관없이 반드시 실행 코드 블록

이어지는 코드
이어지는 코드
이어지는 코드

이어지는 코드는 계속 실행하게 할 수 있다.

* 강제성!!(예외처리를 반드시 해야할까?)

- 일반적인 경우에는 프로그래머의 선택
- 특별한 경우에는 반드시 예외처리를 해야함.
  (안하면 절대 x, 꼭 예외처리를 해주어야 하는 경우가 있음)
- 언제든지 에러가 발생할 수 있는 위험을 가지고 있는 경우
1) 외부 자원을 연결하는 경우(cpu, file)
2) 네트워크를 연결하는 경우
3) db 연결하는 경우

* 파일 열기 모드

r	읽기모드 - 파일을 읽기만 할 때 사용
w	쓰기모드 - 파일에 내용을 쓸 때 사용
a	추가모드 - 파일의 마지막에 새로운 내용을 추가 시킬 때 사용

* 서버와 클라이언트
- 서버: 사용자들에게 제공하는 컴퓨터
- 클라이언트: 서버에게 서비스를 요청해서 사용하는 컴퓨터

* IP 주소: 인터넷에서 컴퓨터의 주소
- IPv4, IPv6 2가지가 공존하고 있다

* 포트(port): 가상적인 통신 선로

mysql   ip+port(3306)
oracle  ip+port(5512)
tomcat  ip+port(8899)

* DNS, URL
1) DNS(Domain Name System): 숫자 대신 기호를 사용하는 주소
- 범위 이름(domain name) ---> ip 변환
2) DNS 서버: 기호 주소를 숫자 주소가 변환해주는 서버
3) URL(Uniform Resource Locator)
- 인터넷 상의 파일이나 데이터베이스같은 자원에 대한 주소를 지정하는 방법
ex) http:// www.naver.com:80/index.html
  프로토콜      호스트 이름  포트  파일 이름
    이름                  번호

* 프로토콜(protocol): 통신을 하기 위한 약속
1) TCP (Transmission Control Protocol)
- 신뢰성있게 통신하기 위해 먼저 서로 간에 연결을 설정한 후에 데이터를 받는 방식
- 서버는 연결 요청만을 받는 소켓을 따로 가지고 있다
- 서버가 하나의 소켓만을 사용한다면 문제가 발생한다
2) UDP (User Datagram Protocol)
- 데이터를 몇 개의 고정 길이의 패킷(다이어그램)으로 분할하여 전송

* 소켓(socket) : TCP를 사용하여 응용 프로그램끼리 통신을 하기 위한 연결 끝점(end point)